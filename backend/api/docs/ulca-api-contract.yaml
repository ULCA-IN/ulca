openapi: 3.0.1
info:
  title: Unified Language Contribution API (ULCA) documentation
  description: 'The ULCA API documentation defines a core set of interfaces that enables users and communities to contribute AI/ML datasets to build a large, open Indic languages resource ecosystem. The dataset contributions are primarily geared toward the area of NLP, ASR/TTS and OCR. The documentation proposes core set of interfaces where various AI based models can be hosted, referenced and benchmarked. The interfaces enables entire community to participate, collaborate and track key benchmark parameters.'
  contact:
    name: ekstep foundation
    email: contact@ekstep.org
  version: 0.7.0
servers:
- url: https://meity-auth.ulcacontrib.org 
  description: Production server (uses live data)
paths:
  /ulca/apis/v0/dataset/corpus/submit:
    post:
      tags:
      - dataset-controller
      operationId: datasetSubmit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetSubmitRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DatasetSubmitResponse'
        "400":
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
      

  /ulca/apis/v0/dataset/corpus/search:
    post:
      tags:
      - dataset-controller
      operationId: corpusSearch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetCorpusSearchRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DatasetCorpusSearchResponse'
        "400":
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/dataset/listByUserId:
    get:
      tags:
      - dataset-controller
      operationId: listByUserIdDataset
      parameters:
      - name: userId
        in: query
        required: true
        schema:
          type: string
      - name: startPage
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: endPage
        in: query
        required: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DatasetListByUserIdResponse'
        "400":
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/dataset/getByServiceRequestNumber:
    get:
      tags:
      - dataset-controller
      operationId: datasetByServiceRequestNumber
      parameters:
      - name: serviceRequestNumber
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DatasetByServiceReqNrResponse'
        "400":
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/dataset/getByDatasetId:
    get:
      tags:
      - dataset-controller
      operationId: datasetById
      parameters:
      - name: datasetId
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DatasetByIdResponse'
        "400":
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/dataset/corpus/search/status:
    get:
      tags:
      - dataset-controller
      operationId: searchStatus
      parameters:
      - name: serviceRequestNumber
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DatasetSearchStatusResponse'
        "400":
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/dataset/corpus/search/listByUserId:
    get:
      tags:
      - dataset-controller
      operationId: searchListByUserId
      parameters:
      - name: userId
        in: query
        required: true
        schema:
          type: string
      - name: startPage
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: endPage
        in: query
        required: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SearchListByUserIdResponse'
        "400":
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/model/upload:
    post:
      tags:
      - model-controller
      operationId: uploadModel
      summary: Api to upload model json file
      description: upload the model file in json format
      parameters:
      - name: userId
        in: query
        required: true
        schema:
          type: string
        example:
          userId: 164972ebd9a54f39a97a67bae55162ea
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              example:
                type: /Users/XYZ/Desktop/VakyanshASR-English.json
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UploadModelResponse'
        "400":
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/model/tryMe:
    post:
      tags:
        - model-controller
      operationId: tryMeOcrImageContent
      summary: Api to detect the text in image file
      description: upload the image file to detect the text
      parameters:
        - name: modelId
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - file
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModelComputeResponse'

  /ulca/apis/v0/model/status/change:
    post:
      tags:
        - model-controller
      operationId: changeStatus
      summary: Api to publish/unpublish a model
      description: changes the status of model to publish and unpublish and also accepts reason of unpublish
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelStatusChangeRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModelStatusChangeResponse'

  /ulca/apis/v0/model/search:
    post:
      tags:
      - model-controller
      operationId: searchModel
      summary: Api to search model
      description: searches the model
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelSearchRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModelSearchResponse'
        "400":
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/model/feedback/submit:
    post:
      tags:
        - model-controller
      operationId: modelFeedbackSubmit
      summary: Api to provide feedback for model
      description: users can provide feedback for model after try
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelFeedbackSubmitRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModelFeedbackSubmitResponse'

  /ulca/apis/v0/model/compute:
    post:
      tags:
      - model-controller
      operationId: computeModel
      summary: Api to compute the model inference end point result
      description: model inference end point is fetched
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelComputeRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModelComputeResponse'
        "400":
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/model/listByUserId:
    get:
      tags:
        - model-controller
      operationId: listByUserId
      summary: Api to get model by userId or search model of that user by model name
      description: list of model of logged-in user and/or search models of logged-in user by model name
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
          example: 6a73afa4fc774dcdb28d5fff944511f6
           
        - name: startPage
          in: query
          required: false
          schema:
            type: integer
            format: int32
          example: 1
          
        - name: endPage
          in: query
          required: false
          schema:
            type: integer
            format: int32
          example: 2
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            format: int32
          example: 10
        - name: name
          in: query
          required: false
          schema:
            type: string
          example: IndicTrans
        
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModelListByUserIdResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

                
  /ulca/apis/v0/model/getModel:
    get:
      tags:
        - model-controller
      operationId: getModel
      summary: Api to fetch model on modelId
      description: fetch the model details by passing modelId
      parameters:
        - name: modelId
          in: query
          required: true
          schema:
            type: string
          example: 61c14e928112f94aa569c688
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModelListResponseDto'
        "400":
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'
                
  /ulca/apis/v0/model/getModelHealthStatus:
    get:
      tags:
        - model-controller
      operationId: getHealthStatus
      summary: Api to fetch list of available models
      description: fetch list of available models
      parameters:
        - name: taskType
          in: query
          required: false
          schema:
            type: string
          example: translation
        - name: startPage
          in: query
          required: false
          schema:
            type: integer
            format: int32
          example: 1
        - name: endPage
          in: query
          required: false
          schema:
            type: integer
            format: int32
          example: 2
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModelHealthStatusResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/model/feedback/getByTaskType:
    get:
      tags:
        - model-controller
      operationId: getModelFeedbackByTaskType
      summary: Api to fetch model feedback by taskType
      description: fetch model feedback by taskType
      parameters:
        - name: taskType
          in: query
          required: true
          schema:
            type: string
          example: translation
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetModelFeedbackListResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

      
  /ulca/apis/v0/model/feedback/getByModelId:
    get:
      tags:
        - model-controller
      operationId: getModelFeedbackByModelId
      summary: Api to fetch model feedback by modelId
      description: fetch model feedback by modelId
      parameters:
        - name: modelId
          in: query
          required: true
          schema:
            type: string
          example: 61c380072e74fa406e7618ba
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModelFeedback'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'


  /ulca/apis/v0/benchmark/submit:
    post:
      tags:
        - benchmark-controller
      operationId: submitBenchmark
      summary: Api to submit the benchmark dataset
      description: Api to submit the benchmark dataset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BenchmarkSubmitRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BenchmarkSubmitResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/benchmark/search:
    post:
      tags:
        - benchmark-controller
      operationId: searchBenchmark
      summary: Api to search the benchmark dataset
      description: Api to search the benchmark dataset
      parameters:
        - name: startPage
          in: query
          required: false
          schema:
            type: integer
            format: int32
          example: 1
        - name: endPage
          in: query
          required: false
          schema:
            type: integer
            format: int32
          example: 2
           
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BenchmarkSearchRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BenchmarkSearchResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/benchmark/getByTask:
    post:
      tags:
        - benchmark-controller
      operationId: listBytask
      summary: Api to fetch the benchmark dataset on taskType
      description: Api to search the benchmark dataset based on taskType
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BenchmarkListByModelRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BenchmarkListByModelResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/benchmark/execute:
    post:
      tags:
        - benchmark-controller
      operationId: executeBenchmark
      summary: Api to run benchmark process against a benchmark dataset
      description: Api to run benchmark process against a benchmark dataset for one metric
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteBenchmarkRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExecuteBenchmarkResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/benchmark/execute/allMetric:
    post:
      tags:
        - benchmark-controller
      operationId: executeBenchmarkAllMetric
      summary: Api to run benchmark process against a benchmark dataset for all metric available
      description: Api to run benchmark process against a benchmark dataset for all metric available
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteBenchmarkAllMetricRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExecuteBenchmarkResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/benchmark/process/status:
    get:
      tags:
        - benchmark-controller
      operationId: processStatus
      summary: Api to fetch status of benchmark process
      description: fetch status of benchmark process by benchmarkProcessId
      parameters:
        - name: benchmarkProcessId
          in: query
          required: true
          schema:
            type: string
          example: 3338807029
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BmProcessListByProcessIdResponse'
        '400':
          description: On input errors causing a failure in the job.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HttpErrorResponse'

  /ulca/apis/v0/benchmark/getBenchmark:
    get:
      tags:
        - benchmark-controller
      operationId: getBenchmarkById
      parameters:
        - name: benchmarkId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetBenchmarkByIdResponse'
  
  
  
  
  /v1/users/signup:
    post:
      tags:
        - 'Create Users'
      summary: 'REST API to register/create new user'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignupRequest'
        required: true
      responses:
        '200':
          description: New user is created successfully.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          description: On input errors causing failure in user account creation.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: On system level errors causing failure in user account creation.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
      
  /v1/users/verify-user:
    post:
      tags:
        - 'Verify Users'
      summary: 'REST API to verify user account.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserVerificationRequest'
        required: true
      responses:
        '200':
          description: User has verified successfully.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserVerificationResponse'
        '400':
          description: On input errors causing failure in user verification.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: On system level errors causing failure in user verification.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  
  /v1/users/api-key-search:
    post:
      tags:
        - 'Api-key-search'
      summary: 'REST API key for search'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeySearchRequest'
        required: true
      responses:
        '200':
          description: apiKey search is successful.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiKeySearchResponse'
        '400':
          description: On input errors causing failure in auth token search.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: On system level errors causing failure in auth token search.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'   
                
  /v1/users/login:
    post:
      tags:
        - 'Login'
      summary: 'REST API to login'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
        required: true
      responses:
        '200':
          description: Logged in successfully.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
        '400':
          description: On input errors causing failure in user login.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: On system level errors causing failure in user login.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error' 
                
   
  /v1/users/forgot-password:
    post:
      tags:
        - 'Forgot Password'
      summary: 'REST API for forgot password request'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
        required: true
      responses:
        '200':
          description: User has notfied successfully.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          description: On input errors causing failure in user notification.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: On system level errors causing failure in user notification.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'          
  /v1/users/reset-password:
    post:
      tags:
        - 'Reset Password'
      summary: 'REST API for resetting password'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
        required: true
      responses:
        '200':
          description: Password updated successfully.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          description: On input errors causing failure in password resetting.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: On system level errors causing failure in password resetting.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /v0/error/report:
    post:
      tags:
        - 'Report Errors'
      summary: 'REST API to get a downloadable reports on errors '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorReportRequest'
        required: true
      responses:
        '200':
          description: Request successfull.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorReportResponse'
        '400':
          description: On input errors causing failure reporting.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: On system level errors causing failure in reporting.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'

                
components:
  schemas:
    DatasetSubmitRequest:
      required:
      - datasetName
      - url
      - userId
      type: object
      properties:
        userId:
          type: string
        datasetName:
          type: string
        url:
          type: string
      example: 
        userId: 164972ebd9a54f39a97a67bae55162ea
        datasetName: asr-corpus-validate
        url: https://ulca-datasets.s3.ap-south-1.amazonaws.com/dev-test/Asr/testAsr2.zip 
          
        
    Data:
      type: object
      properties:
        serviceRequestNumber:
          type: string
        datasetId:
          type: string
        timestamp:
          type: string
    DatasetSubmitResponse:
      type: object
      properties:
        message:
          type: string
        data:
          $ref: '#/components/schemas/Data'
    DatasetCorpusSearchRequest:
      required:
      - criteria
      type: object
      properties:
        userId:
          type: string
        datasetType:
          type: string
          enum:
          - parallel-corpus
          - monolingual-corpus
          - asr-corpus
          - asr-unlabeled-corpus
          - ocr-corpus
          - document-layout-corpus
        criteria:
          $ref: '#/components/schemas/SearchCriteria'
    SearchCriteria:
      type: object
      properties:
        licence:
          type: array
          items:
            type: string
        minScore:
          type: number
          format: float
        serviceRequestNumber:
          type: string
        targetLanguage:
          type: array
          items:
            type: string
        collectionMode:
          type: array
          items:
            type: string
        multipleContributors:
          type: boolean
        maxScore:
          type: number
          format: float
        collectionSource:
          type: array
          items:
            type: string
        score:
          type: number
          format: float
        domain:
          type: array
          items:
            type: string
        limit:
          type: integer
          format: int32
        datasetId:
          type: string
        datasetType:
          type: string
        sourceLanguage:
          type: array
          items:
            type: string
        groupBy:
          type: boolean
        countOfTranslations:
          type: integer
          format: int32
        originalSourceSentence:
          type: boolean
    DatasetCorpusSearchResponse:
      type: object
      properties:
        message:
          type: string
        data:
          $ref: '#/components/schemas/Data'
    DatasetListByUserIdResponse:
      type: object
      properties:
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/DatasetListByUserIdResponseDto'
        count:
          type: integer
          format: int32
        startPage:
          type: integer
          format: int32
        endPage:
          type: integer
          format: int32
    DatasetListByUserIdResponseDto:
      type: object
      properties:
        datasetId:
          type: string
        serviceRequestNumber:
          type: string
        datasetName:
          type: string
        datasetType:
          type: string
        submittedOn:
          type: string
        status:
          type: string
    DatasetByServiceReqNrResponse:
      type: object
      properties:
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/TaskTracker'
    Error:
      type: object
      properties:
        code:
          type: string
          description: Code of the error
        message:
          type: string
          description: Description of the error
        cause:
          type: object
          description: Additional details related to the cause of the error
        report:
          type: string
          description: Link to the error report file
      description: Task Tracker entity
    TaskTracker:
      type: object
      properties:
        serviceRequestNumber:
          type: string
          description: Unique identifier of the service request
        tool:
          type: string
          description: Tool updating this data
          enum:
          - download
          - pseudo
          - ingest
          - validate
          - publish
          - search
          - delete
        id:
          type: string
        status:
          type: string
          description: Status of the task
        details:
          type: string
          description: Details of the current status of the task
        startTime:
          type: string
          description: ISO timestamp of the instance of the start of process
        endTime:
          type: string
          description: ISO timestamp of the instance of the end of process
        lastModified:
          type: string
          description: ISO timestamp of the instance of the end of process
        error:
          $ref: '#/components/schemas/Error'
      description: Task Tracker entity
    DatasetByIdResponse:
      type: object
      properties:
        message:
          type: string
        data:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/TaskTracker'
    DatasetSearchStatusResponse:
      type: object
      properties:
        message:
          type: string
        data:
          $ref: '#/components/schemas/Data'
    SearchListByUserIdResponse:
      type: object
      properties:
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/SearchListByUserIdResponseDto'
        count:
          type: integer
          format: int32
        startPage:
          type: integer
          format: int32
        endPage:
          type: integer
          format: int32
    SearchListByUserIdResponseDto:
      type: object
      properties:
        serviceRequestNumber:
          type: string
        timestamp:
          type: string
        searchCriteria:
          $ref: '#/components/schemas/SearchCriteria'
        status:
          type: array
          items:
            $ref: '#/components/schemas/TaskTracker'
    ASRConfig:
      required:
      - language
      type: object
      properties:
        modelId:
          type: string
          description: Unique identifier of model
          example: "103"
        language:
          $ref: '#/components/schemas/LanguagePair'
        audioFormat:
          type: string
          enum:
          - wav
          - pcm
          - mp3
          - flac
        channel:
          type: string
          enum:
          - mono
          - stereo
        samplingRate:
          type: number
        bitsPerSample:
          type: string
          enum:
          - sixteen
          - eight
        transcriptionFormat:
          $ref: '#/components/schemas/TranscriptionFormat'
        profanityFilter:
          type: boolean
          example: true
        domain:
          type: array
          properties:
            empty:
              type: boolean
          description: This attribute defines that `relevant business area`
          items:
            type: string
            description: This attribute defines that `relevant business area`
        detailed:
          type: boolean
          description: "to specify whether details are required in output like SNR,\
            \ sampling rate"
        punctuation:
          type: boolean
          example: true
        model:
          type: string
          enum:
          - command_and_search
          - phone_call
          - video
          - default
    ASRFile:
      type: object
      properties:
        audioContent:
          type: array
          description: audio content with audio duration <= 1min
          items:
            type: string
            description: audio content with audio duration <= 1min
            format: byte
        audioUri:
          type: string
          description: path on gcp/s3 bucket or https url
          example: gs://bucket/audio.wav
    ASRInference:
      required:
      - request
      - taskType
      type: object
      allOf:
      - $ref: '#/components/schemas/OneOfInferenceAPIEndPointSchema'
      - type: object
        properties:
          taskType:
            type: string
          request:
            $ref: '#/components/schemas/ASRRequest'
          response:
            $ref: '#/components/schemas/ASRResponse'
    ASRRequest:
      required:
      - audio
      - config
      type: object
      properties:
        audio:
          $ref: '#/components/schemas/ASRFile'
        config:
          $ref: '#/components/schemas/ASRConfig'
    ASRResponse:
      required:
      - output
      type: object
      properties:
        output:
          type: array
          properties:
            empty:
              type: boolean
          description: list of
          items:
            $ref: '#/components/schemas/Sentence'
        config:
          $ref: '#/components/schemas/TranslationConfig'
      description: the response for translation.  Standard http status codes to be
        used.
    Contributor:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 50
          minLength: 5
          type: string
          description: human name of the contributor
        oauthId:
          $ref: '#/components/schemas/OAuthIdentity'
        aboutMe:
          type: string
          description: describing the contributor
    InferenceAPIEndPoint:
      required:
      - callbackUrl
      - schema
      type: object
      properties:
        callbackUrl:
          type: string
        schema:
          oneOf:
          - $ref: '#/components/schemas/ASRInference'
          - $ref: '#/components/schemas/OCRInference'
          - $ref: '#/components/schemas/TTSInference'
          - $ref: '#/components/schemas/TranslationInference'
      description: hosted location defines the end point of the model inference. specify
        a taskType along with Inference type
    LanguagePair:
      required:
      - sourceLanguage
      type: object
      properties:
        sourceLanguageName:
          type: string
          description: human name associated with the language code
          example: English
        sourceLanguage:
          type: string
          description: "Indic language code, iso-639-1, iso 639-2"
          enum:
          - en
          - hi
          - mr
          - ta
          - te
          - kn
          - gu
          - pa
          - bn
          - ml
          - as
          - brx
          - doi
          - ks
          - kok
          - mai
          - mni
          - ne
          - or
          - sd
          - si
          - ur
          - sat
          - lus
          - njz
          - pnr
          - kha
          - grt
          - sa
        targetLanguageName:
          type: string
          description: human name associated with the language code
          example: Hindi
        targetLanguage:
          type: string
          description: "Indic language code, iso-639-1, iso 639-2"
          enum:
          - en
          - hi
          - mr
          - ta
          - te
          - kn
          - gu
          - pa
          - bn
          - ml
          - as
          - brx
          - doi
          - ks
          - kok
          - mai
          - mni
          - ne
          - or
          - sd
          - si
          - ur
          - sat
          - lus
          - njz
          - pnr
          - kha
          - grt
          - sa
      description: "language pair, make targetLanguage null to reuse the object to\
        \ indicate single language"

    ModelExtended:
      required:
        - description
        - domain
        - inferenceEndPoint
        - languages
        - license
        - name
        - submitter
        - task
        - trainingDataset
      type: object
      properties:
        name:
          maxLength: 100
          minLength: 5
          type: string
          description: model name that you want your users to see
          example: vakyansh asr model
        description:
          maxLength: 1000
          minLength: 25
          type: string
          description: >-
            brief description about model, its goal, basically something sweet
            about it
          example: Speech recognition model for classroom lecture
        refUrl:
          maxLength: 200
          minLength: 5
          type: string
          description: github link or url giving further info about the model
          example: https://github.com/Open-Speech-EkStep/vakyansh-models
        task:
          $ref: '#/components/schemas/ModelTask'
        languages:
          type: array
          properties:
            empty:
              type: boolean
          items:
            $ref: '#/components/schemas/LanguagePair'
        license:
          type: string
          enum:
            - cc-by-4.0
            - cc-by-sa-4.0
            - cc-by-nd-2.0
            - cc-by-nd-4.0
            - cc-by-nc-3.0
            - cc-by-nc-4.0
            - cc-by-nc-sa-4.0
            - mit
            - gpl-3.0
            - bsd-3-clause
            - private-commercial
            - unknown-license
            - custom-license
        licenseUrl:
          type: string
          description: url of the custom license
        domain:
          type: array
          properties:
            empty:
              type: boolean
          description: This attribute defines that `relevant business area`
          items:
            type: string
            description: This attribute defines that `relevant business area`
        submitter:
          $ref: '#/components/schemas/Submitter'
        inferenceEndPoint:
          $ref: '#/components/schemas/InferenceAPIEndPoint'
        trainingDataset:
          $ref: '#/components/schemas/TrainingDataset'
        modelId:
          type: string
        version:
          type: string
        userId:
          type: string
        submittedOn:
          type: string
        publishedOn:
          type: string
        status:
          type: string
        unpublishReason:
          type: string
          
    ModelTask:
      type: object
      properties:
        type:
          type: string
          enum:
            - translation
            - transliteration
            - tts
            - asr
            - document-layout
            - ocr
      example: 
        type: translation
         
      description: the category of model under which it has been released or trained

    OAuthIdentity:
      type: object
      properties:
        identifier:
          type: string
          description: system identification for the contributor
        oauthId:
          type: string
          description: "popular social network identifier, typically identifier returned\
            \ after auth"
        provider:
          type: string
          description: user authentication provider
          enum:
          - custom
          - github
          - facebook
          - instagram
          - google
          - yahoo
    OCRConfig:
      required:
      - language
      type: object
      properties:
        modelId:
          type: string
          description: Unique identifier of model
          example: "103"
        language:
          $ref: '#/components/schemas/LanguagePair'
    OCRInference:
      required:
      - request
      - taskType
      type: object
      allOf:
      - $ref: '#/components/schemas/OneOfInferenceAPIEndPointSchema'
      - type: object
        properties:
          taskType:
            type: string
          request:
            $ref: '#/components/schemas/OCRRequest'
          response:
            $ref: '#/components/schemas/OCRResponse'
    OCRRequest:
      required:
      - config
      - imageUri
      type: object
      properties:
        imageUri:
          type: array
          description: list of paths on gcp/s3 bucket or https url
          example: gs://bucket/testimg.jpeg
          items:
            type: string
            description: list of paths on gcp/s3 bucket or https url
            example: gs://bucket/testimg.jpeg
        config:
          $ref: '#/components/schemas/OCRConfig'
    OCRResponse:
      required:
      - output
      type: object
      properties:
        output:
          type: array
          properties:
            empty:
              type: boolean
          description: list of
          items:
            $ref: '#/components/schemas/Sentence'
        config:
          $ref: '#/components/schemas/TranslationConfig'
      description: the response for translation.  Standard http status codes to be
        used.
    OneOfInferenceAPIEndPointSchema:
      required:
      - taskType
      type: object
      properties:
        taskType:
          type: string
      discriminator:
        propertyName: taskType
    Sentence:
      required:
      - source
      type: object
      properties:
        source:
          maxLength: 2147483647
          minLength: 1
          type: string
          description: input sentence for the model
        target:
          maxLength: 2147483647
          minLength: 1
          type: string
          description: "to be used along with translation model. expected translated\
            \ sentence, for reference"
      description: list of

    SentenceList:
      required:
        - source
      type: object
      properties:
        source:
          maxLength: 2147483647
          minLength: 1
          type: string
          description: input sentence for the model
        target:
          type: array
          description: list of sentences
          items:
            type: string
            description: list of sentences
      description: list of sentences

    Submitter:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 50
          minLength: 5
          type: string
          description: Name of the Submitter
        oauthId:
          $ref: '#/components/schemas/OAuthIdentity'
        aboutMe:
          type: string
          description: Describing the Submitter
        team:
          type: array
          properties:
            empty:
              type: boolean
          items:
            $ref: '#/components/schemas/Contributor'
      description: the schema of data file uploaded should adhere to this specified
        structure.
    TTSConfig:
      required:
      - language
      type: object
      properties:
        modelId:
          type: string
          description: Unique identifier of model
          example: "103"
        language:
          $ref: '#/components/schemas/LanguagePair'
    TTSInference:
      required:
      - request
      - taskType
      type: object
      allOf:
      - $ref: '#/components/schemas/OneOfInferenceAPIEndPointSchema'
      - type: object
        properties:
          taskType:
            type: string
          request:
            $ref: '#/components/schemas/TTSRequest'
          response:
            $ref: '#/components/schemas/TTSResponse'
    TTSRequest:
      required:
      - config
      - input
      type: object
      properties:
        input:
          type: array
          properties:
            empty:
              type: boolean
          description: list of
          items:
            $ref: '#/components/schemas/Sentence'
        config:
          $ref: '#/components/schemas/TTSConfig'
    TTSResponse:
      required:
      - audioUri
      type: object
      properties:
        audioUri:
          type: string
          description: path on gcp/s3 bucket or https url
          example: gs://bucket/audio.wav
        config:
          $ref: '#/components/schemas/ASRConfig'
      description: the response for translation.  Standard http status codes to be
        used.
    TrainingDataset:
      required:
      - description
      type: object
      properties:
        datasetId:
          type: string
          description: "dataset identifier that has been exported from ULCA system,\
            \ passing this information makes your model enriched with further information\
            \ for the community"
        description:
          type: string
          description: explain your dataset that you have used for training your model
      description: training dataset metadata used to train the model
    TranscriptionFormat:
      type: object
      properties:
        value:
          type: string
          description: format of ASR output
          enum:
          - srt
          - transcript
          - alternatives
    TranslationConfig:
      required:
      - language
      type: object
      properties:
        modelId:
          type: integer
          description: Unique identifier of model
          format: int32
          example: 103
        language:
          $ref: '#/components/schemas/LanguagePair'
    TranslationInference:
      required:
      - request
      - taskType
      type: object
      allOf:
      - $ref: '#/components/schemas/OneOfInferenceAPIEndPointSchema'
      - type: object
        properties:
          taskType:
            type: string
          request:
            $ref: '#/components/schemas/TranslationRequest'
          response:
            $ref: '#/components/schemas/TranslationResponse'
    TranslationRequest:
      required:
      - config
      - input
      type: object
      properties:
        input:
          type: array
          properties:
            empty:
              type: boolean
          description: list of
          items:
            $ref: '#/components/schemas/Sentence'
        config:
          $ref: '#/components/schemas/TranslationConfig'
    TranslationResponse:
      required:
      - output
      type: object
      properties:
        output:
          type: array
          properties:
            empty:
              type: boolean
          description: list of
          items:
            $ref: '#/components/schemas/Sentence'
        config:
          $ref: '#/components/schemas/TranslationConfig'
      description: the response for translation.  Standard http status codes to be
        used.
    UploadModelResponse:
      type: object
      properties:
        message:
          type: string
        data:
          $ref: '#/components/schemas/ModelExtended'
    
    ModelStatusChangeRequest:
      type: object
      properties:
        userId:
          type: string
        modelId:
          type: string
        status:
          type: string
          enum:
            - published
            - unpublished
        unpublishReason:
          type: string
      example:
        userId: 164972ebd9a54f39a97a67bae55162ea
        modelId: 61c380072e74fa406e7618ba
        status: unpublished
        unpublishReason: running benchmark
    
    ModelStatusChangeResponse:
      type: object
      properties:
        message:
          type: string
      example:
        message: Model unpublished successfull.
    
    ModelSearchRequest:
      required:
        - task
      type: object
      properties:
        task:
          type: string
        sourceLanguage:
          type: string
        targetLanguage:
          type: string
      example:
        task: translation
        sourceLanguage: en
        targetLanguage: hi

    ModelSearchResponse:
      type: object
      properties:
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/ModelExtended'
        count:
          type: integer
          format: int32
    ModelFeedbackSubmitRequest:
      required:
        - taskType
      type: object
      properties:
        taskType:
          type: string
        modelId:
          type: string
        userId:
          type: string
        input:
          type: string
        output:
          type: string
        feedback:
          type: object
        detailedFeedback:
          type: array
          items:
            $ref: '#/components/schemas/ModelFeedbackSubmitRequest'
      example:
        taskType: translation
        input: how are you today ?
        output: இன்று நீங்கள் எப்படி இருக்கிறீர்கள்?
        feedback:
          - feedbackQuestion: Are you satisfied with this translation?
            feedbackQuestionResponse: 3
          - feedbackQuestion: Add your comments
            feedbackQuestionResponse: translation is good
          - suggestedOutput: null
          - feedbackQuestion: Rate Translated Text Quality
            feedbackQuestionResponse: true
        detailedFeedback: []
        userId: 6a73afa4fc774dcdb28d5fff944511f6
        
    FeedbackData:
      type: object
      properties:
        feedbackId:
          type: string
    ModelFeedbackSubmitResponse:
      type: object
      properties:
        message:
          type: string
        data:
          $ref: '#/components/schemas/FeedbackData'
      example:
        message: model feedback submitted successful
        data: 
          feedbackId: 61c380072e74fa406e7618ba

    Input:
      type: object
      properties:
        source:
          type: string

    ModelComputeRequest:
      required:
        - modelId
      type: object
      properties:
        modelId:
          type: string
        task:
          type: string
        gender:
          type: string
          enum:
            - male
            - female
            - transgender
            - non-specified
            - others
        input:
          type: array
          items:
            $ref: '#/components/schemas/Input'
        audioUri:
          type: string
        audioContent:
          type: array
          items:
            type: string
            format: byte
        imageUri:
          type: string
      example:
        modelId: 610cfe8b014fa35d5e767c35
        task: translation
        input:
          - source: how are you today ?
        userId: 6a73afa4fc774dcdb28d5fff944511f6
        
    ModelComputeResponse:
      type: object
      properties:
        outputText:
          type: string
        transliterationOutput:
          type: array
          properties:
            empty:
              type: boolean
          description: list of
          items:
            $ref: '#/components/schemas/SentenceList'
      example:
        outputText: இன்று நீங்கள் எப்படி இருக்கிறீர்கள்?
        transliterationOutput: null
    
    ModelListByUserIdResponse:
      type: object
      properties:
        message:
          type: string
          example: success
        data:
          type: array
          items:
            $ref: '#/components/schemas/ModelListResponseDto'
        count:
          type: integer
          format: int32
          example: 10
        totalCount:
          type: integer
          format: int32
          example: 172
     
    ModelListResponseDto:
      required:
        - description
        - domain
        - inferenceEndPoint
        - languages
        - license
        - name
        - submitter
        - task
        - trainingDataset
      type: object
      properties:
        metric:
          type: array
          items:
            type: string
          example: ["bleu","meteor","ribes","gleu","bert", "chrf"]
        benchmarkPerformance:
          type: array
          items:
            $ref: '#/components/schemas/BenchmarkProcess'
        name:
          maxLength: 100
          minLength: 5
          type: string
          description: model name that you want your users to see
          example: vakyansh asr model
        description:
          maxLength: 1000
          minLength: 25
          type: string
          description: >-
            brief description about model, its goal, basically something sweet
            about it
          example: Speech recognition model for classroom lecture
        refUrl:
          maxLength: 200
          minLength: 5
          type: string
          description: github link or url giving further info about the model
          example: https://github.com/Open-Speech-EkStep/vakyansh-models
        task:
          $ref: '#/components/schemas/ModelTask'
        languages:
          type: array
          properties:
            empty:
              type: boolean
          items:
            $ref: '#/components/schemas/LanguagePair'
        license:
          type: string
          enum:
            - cc-by-4.0
            - cc-by-sa-4.0
            - cc-by-nd-2.0
            - cc-by-nd-4.0
            - cc-by-nc-3.0
            - cc-by-nc-4.0
            - cc-by-nc-sa-4.0
            - mit
            - gpl-3.0
            - bsd-3-clause
            - private-commercial
            - unknown-license
            - custom-license
        licenseUrl:
          type: string
          description: url of the custom license
        domain:
          type: array
          properties:
            empty:
              type: boolean
          description: This attribute defines that `relevant business area`
          items:
            type: string
            description: This attribute defines that `relevant business area`
        submitter:
          $ref: '#/components/schemas/Submitter'
        inferenceEndPoint:
          $ref: '#/components/schemas/InferenceAPIEndPoint'
        trainingDataset:
          $ref: '#/components/schemas/TrainingDataset'
        modelId:
          type: string
          example: 61c380072e74fa406e7618ba
        version:
          type: string
          example: v1.0
        userId:
          type: string
          example: 61c380072e74fa406e7618ba
        submittedOn:
          type: string
          example: Sun Nov 07 16:59:23 IST 2021
        publishedOn:
          type: string
          example: Sun Nov 07 16:59:23 IST 2021
        status:
          type: string
          example: unpublished
        unpublishReason:
          type: string
          example: executing benchmark runs

    BenchmarkProcess:
      type: object
      properties:
        id:
          type: string
          example: 61c380072e74fa406e7618ba
        modelId:
          type: string
          example: 61c380072e74fa406e7618ba
        benchmarkProcessId:
          type: string
          example: 3338807029
        benchmarkDatasetId:
          type: string
          example: 61c37ef32e74fa406e7618b6
        benchmarkDatasetName:
          type: string
          example: OCR_benchmark_english
        modelName:
          type: string
          example: Anuvaad-OCR-English
        modelVersion:
          type: string
          example: v1.0
        score:
          type: number
          format: double
          example: 8.5
        metric:
          type: string
          example: bleu
        status:
          type: string
          example: Completed/In-Progress/Failed
        createdOn:
          type: string
          example: Sun Nov 07 16:59:23 IST 2021
        lastModifiedOn:
          type: string
          example: Sun Nov 07 16:59:23 IST 2021
        startTime:
          type: string
          example: Sun Nov 07 16:59:23 IST 2021
        endTime:
          type: string
          example: Sun Nov 07 16:59:23 IST 2021
        recordCount:
          type: integer
          format: int32
          example: 456098

    ModelHealthStatusResponse:
      type: object
      properties:
        message:
          type: string
        benchmark:
          type: array
          items:
            $ref: '#/components/schemas/ModelHealthStatus'
        count:
          type: integer
          format: int32
    
    ModelHealthStatus:
      type: object
      properties:
        modelId:
          type: string
          example: 61c14e928112f94aa569c688
        modelName:
          type: string
          example: Vakyansh-ASR-Hindi
        taskType:
          type: string
          example: translation
        isSyncApi:
          type: boolean
          example: true
        callbackUrl:
          type: string
          
        pollingUrl:
          type: string
        status:
          type: string
          example: available
        lastStatusUpdate:
          type: string
          example: Mon Nov 08 03:00:00 IST 2021
        nextStatusUpdateTiming:
          type: string
          example: Mon Nov 08 04:00:00 IST 2021

    GetModelFeedbackListResponse:
      type: object
      properties:
        feedbackId:
          type: string
          example: 61c380072e74fa406e7618ba
        stsFeedbackId:
          type: string
          example: 61c380072e74fa406e7618ba
        taskType:
          type: string
          example: translation
        modelId:
          type: string
          example: 61c380072e74fa406e7618ba
        stsPerformanceId:
          type: string
          example: 61c380072e74fa406e7618ba
        userId:
          type: string
          example: 164972ebd9a54f39a97a67bae55162ea
        input:
          type: string
          example: how are you today ?
        output:
          type: string
          example: இன்று நீங்கள் எப்படி இருக்கிறீர்கள்?
        feedback:
          type: object
        createdAt:
          type: string
          example: Wed Jul 27 19:02:39 IST 2022
        updatedAt:
          type: string
          example: Wed Jul 27 19:02:39 IST 2022
        detailedFeedback:
          type: array
          items:
            $ref: '#/components/schemas/ModelFeedback'
    ModelFeedback:
      type: object
      properties:
        feedbackId:
          type: string
          example: 61c380072e74fa406e7618ba
        stsFeedbackId:
          type: string
          example: 61c380072e74fa406e7618ba
        taskType:
          type: string
          example: translation
        modelId:
          type: string
          example: 61c380072e74fa406e7618ba
        stsPerformanceId:
          type: string
          example: 61c380072e74fa406e7618ba
        userId:
          type: string
          example: 164972ebd9a54f39a97a67bae55162ea
        input:
          type: string
          example: how are you today ?
        output:
          type: string
          example: இன்று நீங்கள் எப்படி இருக்கிற
        feedback:
          type: object
        createdAt:
          type: string
          example: Wed Jul 27 19:02:39 IST 2022
        updatedAt:
          type: string
          example: Wed Jul 27 19:02:39 IST 2022

    BenchmarkSubmitRequest:
      required:
        - datasetName
        - url
        - userId
      type: object
      properties:
        userId:
          type: string
          example: 164972ebd9a54f39a97a67bae55162ea
        datasetName:
          type: string
          example: Asr Indic benchmark dataset
        url:
          type: string
          example: https://anuvaad-raw-datasets.s3-us-west-2.amazonaws.com/bm-flores-en-hi.zip
    
    BenchmarkSubmitResponse:
      type: object
      properties:
        message:
          type: string
          example: Benchmark Dataset has been Submitted
        data:
          $ref: '#/components/schemas/BenchmarkSubmitData'
          
    BenchmarkSubmitData:
      type: object
      properties:
        serviceRequestNumber:
          type: string    
          example: 4432197063
        benchmarkId:
          type: string
          example: 61c159f58112f94aa569c68b
        timestamp:
          type: string
          example: Wed Jul 27 19:02:39 IST 2022

    BenchmarkSearchRequest:
      required:
        - task
      type: object
      properties:
        task:
          type: string
          example: translation
        sourceLanguage:
          type: string
          example: en
        targetLanguage:
          type: string
          example: hi     
    BenchmarkSearchResponse:
      type: object
      properties:
        message:
          type: string
          example: Benchmark Search Result
        data:
          type: array
          items:
            $ref: '#/components/schemas/Benchmark'
        count:
          type: integer
          format: int32
          example: 24

    Benchmark:
      required:
        - dataset
        - description
        - domain
        - languages
        - license
        - name
        - submitter
        - task
      type: object
      properties:
        benchmarkId:
          type: string
          description: auto-generated unique identification of benchmark data
          example: 6149e0f378af0820a7d2fb28
        name:
          type: string
          description: name of the benchmark
          example: FLORES-101 en-mr Evaluation Benchmark
        version:
          type: string
          description: params schema version
          example: v1.20
        license:
          type: string
          enum:
            - cc-by-4.0
            - cc-by-sa-4.0
            - cc-by-nd-2.0
            - cc-by-nd-4.0
            - cc-by-nc-3.0
            - cc-by-nc-4.0
            - cc-by-nc-sa-4.0
            - mit
            - gpl-3.0
            - bsd-3-clause
            - private-commercial
            - unknown-license
            - custom-license
          
        licenseUrl:
          type: string
          description: url of the custom license
        description:
          maxLength: 200
          minLength: 50
          type: string
          description: description of the benchmark including how it has been curated
          example: benchmark sentences for government press release domain
        userId:
          type: string
          example: 164972ebd9a54f39a97a67bae55162ea
        dataset:
          maxLength: 200
          minLength: 50
          type: string
          description: benchmark dataset url
          example: benchmark dataset url
        domain:
          type: array
          properties:
            empty:
              type: boolean
          description: This attribute defines that `relevant business area`
          items:
            type: string
            description: This attribute defines that `relevant business area`
        task:
          $ref: '#/components/schemas/ModelTask'
        languages:
          $ref: '#/components/schemas/LanguagePair'
        submitter:
          $ref: '#/components/schemas/Submitter'
        collectionSource:
          type: array
          properties:
            empty:
              type: boolean
          description: various sources, url from where the information is collected.
          example:
            - https://main.sci.gov.in
          items:
            type: string
            description: various sources, url from where the information is collected.
            example: '["https://main.sci.gov.in"]'
        paramSchema:
          type: object
          description: Object created from params.json
        createdOn:
          type: string
          description: timestamp when benchmark is created
          example: Wed Jul 27 19:02:39 IST 2022
        submittedOn:
          type: string
          description: timestamp when benchmark is submitted/published
          example: Wed Jul 27 19:02:39 IST 2022
        status:
          type: string
          example: Completed
      description: the benchmark dataset for model task.

    BenchmarkListByModelRequest:
      required:
        - modelId
      type: object
      properties:
        modelId:
          type: string
          example: 6149e0f378af0820a7d2fb28

    
    BenchmarkListByModelResponse:
      type: object
      properties:
        message:
          type: string
          example: Benchmark Search Result
        benchmark:
          type: array
          items:
            $ref: '#/components/schemas/BenchmarkDto'
        count:
          type: integer
          format: int32
          example: 24

    BenchmarkDto:
      allOf:     # Combines the BasicErrorModel and the inline model
        - $ref: '#/components/schemas/Benchmark'
        - type: object
          required:
            - rootCause
          properties:
            metric:
              type: array
              items:
                type: string
              example: ["bleu","meteor","ribes","gleu","bert", "chrf"]
            availableMetric:
              type: array
              items:
                type: string
              example: ["bleu","meteor","ribes","gleu","bert", "chrf"]

    BenchmarkMetricRequest:
      type: object
      properties:
        benchmarkId:
          type: string
          example: 61c380072e74fa406e7618ba
        metric:
          type: string
          example: bleu
          
    ExecuteBenchmarkRequest:
      type: object
      properties:
        modelId:
          type: string
          example: 61c380072e74fa406e7618ba
        benchmarks:
          type: array
          items:
            $ref: '#/components/schemas/BenchmarkMetricRequest'
    
    ExecuteBenchmarkResponse:
      type: object
      properties:
        benchmarkProcessIds:
          type: array
          items:
            type: string
          example: ["3338807029"]
    
    ExecuteBenchmarkAllMetricRequest:
      type: object
      properties:
        modelId:
          type: string
          example: 6149e0f378af0820a7d2fb28
        benchmarkId:
          type: string
          example: 6149e0f378af0820a7d2fb28
   
    BmProcessListByProcessIdResponse:
      type: object
      properties:
        message:
          type: string
          example: Benchmark Process list
        data:
          type: array
          items:
            $ref: '#/components/schemas/BenchmarkProcess'
        count:
          type: integer
          format: int32
          example: 1

    GetBenchmarkByIdResponse:
      required:
        - dataset
        - description
        - domain
        - languages
        - name
        - submitter
        - task
      type: object
      properties:
        benchmarkPerformance:
          type: array
          items:
            $ref: '#/components/schemas/BenchmarkProcess'
        benchmarkId:
          type: string
          description: auto-generated unique identification of benchmark data
        name:
          type: string
          description: name of the benchmark
        description:
          maxLength: 200
          minLength: 50
          type: string
          description: description of the benchmark including how it has been curated
          example: benchmark sentences for government press release domain
        metric:
          type: array
          items:
            type: string
        dataset:
          maxLength: 200
          minLength: 50
          type: string
          description: benchmark dataset url
          example: benchmark dataset url
        domain:
          type: array
          properties:
            empty:
              type: boolean
          description: This attribute defines that `relevant business area`
          items:
            type: string
            description: This attribute defines that `relevant business area`
        task:
          $ref: '#/components/schemas/ModelTask'
        languages:
          type: array
          properties:
            empty:
              type: boolean
          items:
            $ref: '#/components/schemas/LanguagePair'
        submitter:
          $ref: '#/components/schemas/Submitter'
        createdOn:
          type: string
          description: timestamp when benchmark is created
        submittedOn:
          type: string
          description: timestamp when benchmark is submitted/published
    HttpErrorResponse:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
          description: status code as encountered in the processing life-cycle
          
        message:
          type: string
          description: human understandable format
        timestamp:
          type: string
          format: datetime

    UserSignupRequest:
      type: object
      required:
        - firstName
        - email
        - password
        - roles
      properties:
        firstName:
         type: string
         description: Firstname of the user to be registered.
        lastName:
          type: string
          description: Lastname of the user to be registered.
        email:
          type: string
          description: email of the user to be registered.
        password:
          type: string
          description: password of the user to be registered.
        roles:
          type: array
          description: Roles assigned to the user to be registered.
          items:
            type: string
        phoneNo:
          type: string
          description: Mobile phone number of the user to be registered.
    

    
    UserLoginRequest:
      type: object
      properties:
        authenticator:
          $ref: '#/components/schemas/Authenticator'
        data:
          type: object
          oneOf:
            - $ref: '#/components/schemas/UlcaLoginAuthenticator'
            - $ref: '#/components/schemas/GmailLoginAuthenticator'
    
  

    ApiKeySearchRequest:
      type: object
      properties:
        key:
          type: string
          description: Unique auth token of verified user
      description: Request for user records.


    ForgotPasswordRequest:
      type: object
      properties:
        email:
          type: string
          description: Unique email of the user.
      description: Request for user records.
    

    ResetPasswordRequest:
      type: object
      properties:
        email:
          type: string
          description: Unique email of the user.
        password:
          type: string
          description: password to be updated


    UserVerificationRequest:
      type: object
      properties:
        email:
          type: string
          description: unique email value.
        userID:
          type: string
          description: unique userid value.
    
        

    User:
      type: object
      properties:
        userID:
          type: string
          description: Unique 32-bit UUID per user.
        firstName:
          type: string
          description: FirstName of the user.
        lastName:
          type: string
          description: LastName of the user.
        email:
          type: string
          description: email id of the user.
        oauthId:
          type: string
          description: oauthId of the user.
        oauthProvider:
          type: string
          description: oauthProvider of the user.
        registeredTime:
          type: string
          description: UTC object indicating time of user signup. 
        activatedTime:
          type: string
          description: UTC object indicating time of user verification.
        isVerified:
          type: boolean
          description: status of user verification.
        isActive:
          type: boolean
          description: status of user activation.
        phoneNo:
          type: string
          description: mobile number of the user
        roles:
          type: array
          items:
            type: string
            
          
  
    Role:
      type: object
      properties:
        roleId:
          type: string
          description: Unique code per role.
        name:
          type: string
          description: role name.
        description:
          type: string
          description: Description of the role.
  
   
  
          
    AuthData:
      type: object
      properties:
        email:
          type: string
          description: email of the logged in user.
        publicKey:
          type: string
          description: random uuid key to be used as public key for the logged in user.
        privateKey:
          type: string
          description: hexadecimal uuid key for the logged in user for encrypting request data.
          
    UserData:
      type: object
      properties:
        userKeys:
          $ref: '#/components/schemas/AuthData'
        userDetails:
          $ref: '#/components/schemas/User'
          
          
    Status:
      type: object
      properties:
        message:
          type: string
          description: message returned after succesful request completion.
        data:
          type: object
          description: data returned by the request.
        count:
          type: integer
          description: count of data items.
    
    UserVerificationResponse:
      type: object
      properties:
        message:
          type: string
          description: message returned after succesful request completion.
        data:
          $ref: '#/components/schemas/AuthData'
        count:
          type: integer
          description: count of data items.
    
    UserLoginResponse:
      type: object
      properties:
        message:
          type: string
          description: message returned after succesful request completion.
        data:
          $ref: '#/components/schemas/UserData'
        count:
          type: integer
          description: count of data items.
    
    ApiKeySearchResponse:
      type: object
      properties:
        message:
          type: string
          description: message returned after succesful request completion.
        data:
          $ref: '#/components/schemas/UserData'
        count:
          type: integer
          description: count of data items.
      
   
      
    UlcaLoginAuthenticator:
      type: object
      properties:
        email:
          type: string
          description: email of user
        password:
          type: string
          description: password of user
         
    GmailLoginAuthenticator:
      type: object
      properties:
        token_type:
          type: string
          description: token type
        access_token:
          type: string
          description: token type
        scope:
          type: string
          description: scope
        login_hint:
          type: string
          description: login_hint
        expires_in:
          type: number
          description: expires_in
        id_token:
          type: number
          description: id_token 
        session_state:
          type: object
          description: session_state
          properties:
            extraQueryParams:
              type: string
              description: extraQueryParams
            authuser:
              type: number
              description: authuser 

          
  
    Authenticator:
      type: string
      enum:
        - ULCA
        - GMAIL
        - GITHUB
        - FACEBOOK
        - LINKEDIN
    
   
  
    
    ErrorReportRequest:
      type: object
      properties:
        serviceRequestNumber:
          type: string
          description: Unique submission id.
      description: Request for error report on a particular submission.

    
    ErrorReportResponse:
      type: object
      properties:
        file:
          type: string
          description: File path to object store.
        internal_file:
          type: string
          description: Internal file path.
        serviceRequestNumber:
          type: string
          description: Unique id for dataset submission
        time_stamp:
          type: string
          description: Report generated date and time.
        count:
          type: integer
          description: Count of errors uploaded on to object store.
        uploaded:
          type: boolean
          description: status of file upload.

  securitySchemes:
      apiKey:
        type: apiKey
        in: header
        name: key
      apiSig:
        type: apiKey
        in: header
        name: sig
        description: signed request url or body   
        
security:
  - apiKey: []
    apiSig: []