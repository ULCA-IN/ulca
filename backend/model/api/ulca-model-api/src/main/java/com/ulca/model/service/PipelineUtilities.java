package com.ulca.model.service;

import org.intellij.lang.annotations.Language;
import org.springframework.core.task.TaskRejectedException;
import java.util.ArrayList;
import java.util.List;

import com.ulca.model.dao.PipelineModel;

import io.swagger.model.SupportedTasks;
import io.swagger.model.LanguagePair;
import io.swagger.pipelinemodel.ConfigList;
import io.swagger.pipelinemodel.ConfigSchema;
import io.swagger.pipelinemodel.TaskSpecification;
import io.swagger.pipelinemodel.TaskSpecifications;
import io.swagger.pipelinerequest.ASRTask;
import io.swagger.pipelinerequest.PipelineResponseLanguagesList;
import io.swagger.pipelinerequest.PipelineTask;
import io.swagger.pipelinerequest.PipelineTasks;
import io.swagger.pipelinerequest.TTSTask;
import io.swagger.pipelinerequest.TranslationRequestConfig;
import io.swagger.pipelinerequest.TranslationTask;
import lombok.extern.slf4j.Slf4j;

@Slf4j

public class PipelineUtilities {
    //Config List is of the pipeline model and taskSpecifications is of generated content
    TaskSpecification getPossibleConfigForCurrentTask(LanguagePair lp, TaskSpecification modelTaskSpecification,TaskSpecifications previousTaskSpecifications) 
    {
        TaskSpecification taskSpecification = new TaskSpecification();
        taskSpecification.setTaskType(modelTaskSpecification.getTaskType());
        ConfigList returnConfigList = new ConfigList();
        //Not the first task of pipelinetasks 
        if(previousTaskSpecifications.size() > 0)
        {
            if(lp.getSourceLanguage() != null)  //There are configs in the task provided by user
            {
                //For each Config within previous task specifications generated by this logic
                for(ConfigSchema previousTaskSchema : previousTaskSpecifications.get(previousTaskSpecifications.size()-1).getTaskConfig())
                {
                    //If source language matches for model and lp or if source script code is empty or matches
                    if(previousTaskSchema.getTargetLanguage() == lp.getSourceLanguage())
                    {
                        if(lp.getSourceScriptCode() == null || lp.getSourceScriptCode() == previousTaskSchema.getTargetScriptCode())
                        {
                            if(lp.getTargetLanguage() == null || previousTaskSchema.getTargetLanguage() == lp.getTargetLanguage())
                            {
                                if(lp.getTargetScriptCode() == null || previousTaskSchema.getTargetScriptCode() == lp.getTargetScriptCode())
                                {
                                    //go through each config in pipeline model
                                    for(ConfigSchema modelTask : modelTaskSpecification.getTaskConfig())
                                    {
                                        //if source lang of pipeline model config matches previous task target lang
                                        if(modelTask.getSourceLanguage() == previousTaskSchema.getTargetLanguage() && modelTask.getSourceScriptCode() == previousTaskSchema.getTargetScriptCode())
                                        {
                                            ConfigSchema confSchema = new ConfigSchema();
                                            confSchema = modelTask;
                                            if(confSchema.getTargetLanguage() == null)
                                                confSchema.setTargetLanguage(confSchema.getSourceLanguage());
                                            if(confSchema.getTargetScriptCode() == null)
                                                confSchema.setTargetScriptCode(confSchema.getSourceScriptCode());
                                            returnConfigList.add(confSchema);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else //if config not entered by user
            {
                for(ConfigSchema previousTaskSchema : previousTaskSpecifications.get(previousTaskSpecifications.size()-1).getTaskConfig())
                {
                    for(ConfigSchema modelTask : modelTaskSpecification.getTaskConfig())
                    {
                        //if source lang of pipeline model config matches previous task target lang
                        if(modelTask.getSourceLanguage() == previousTaskSchema.getTargetLanguage() && modelTask.getSourceScriptCode() == previousTaskSchema.getTargetScriptCode())
                        {
                            ConfigSchema confSchema = new ConfigSchema();
                            confSchema = modelTask;
                            if(confSchema.getTargetLanguage() == null)
                                confSchema.setTargetLanguage(confSchema.getSourceLanguage());
                            if(confSchema.getTargetScriptCode() == null)
                                confSchema.setTargetScriptCode(confSchema.getSourceScriptCode());
                            returnConfigList.add(confSchema);
                        }
                    }
                }
            }
        }
        //It is the first task of pipelinetasks
        else
        {
            if(lp.getSourceLanguage() == null)  //There are no configs in the task provided by user
            {
                for(ConfigSchema modelTask : modelTaskSpecification.getTaskConfig())
                {
                    ConfigSchema confSchema = new ConfigSchema();
                    confSchema = modelTask;
                    if(confSchema.getTargetLanguage() == null)
                        confSchema.setTargetLanguage(confSchema.getSourceLanguage());
                    if(confSchema.getTargetScriptCode() == null)
                        confSchema.setTargetScriptCode(confSchema.getSourceScriptCode());
                    returnConfigList.add(confSchema);
                }
            }
            else  //There are configs in the task provided by the user
            {
                for(ConfigSchema taskConfigSchema : modelTaskSpecification.getTaskConfig())
                {
                    //If source language matches for model and lp or if source script code is empty or matches
                    if(taskConfigSchema.getSourceLanguage() == lp.getSourceLanguage())
                    {
                        if(lp.getSourceScriptCode() == null || taskConfigSchema.getSourceScriptCode() == lp.getSourceScriptCode())
                        {
                            if(lp.getTargetLanguage() == null || taskConfigSchema.getTargetLanguage() == lp.getTargetLanguage())
                            {
                                if(lp.getTargetScriptCode() == null || taskConfigSchema.getTargetScriptCode() == lp.getTargetScriptCode())
                                {
                                    if(taskConfigSchema.getTargetLanguage() == null)
                                        taskConfigSchema.setTargetLanguage(taskConfigSchema.getSourceLanguage());
                                    if(taskConfigSchema.getTargetScriptCode() == null)
                                        taskConfigSchema.setTargetScriptCode(taskConfigSchema.getSourceScriptCode());
                                    returnConfigList.add(taskConfigSchema);
                                }
                            }
                        }
                    }
                }
            }
        }
        taskSpecification.setTaskConfig(returnConfigList);
        return taskSpecification;
    }

    TaskSpecifications getIndividualTaskSpecifications(PipelineTasks pipelineTasks,PipelineModel pipelineModel)   
    {
        TaskSpecifications taskSpecifications = new TaskSpecifications();
        //For each input pipeline task
        for(PipelineTask pipelineTask : pipelineTasks)  
        {   
            LanguagePair lp = new LanguagePair();
            //If current input pipeline task is translation, send it's language pair or null if not present
            //Also send task specification of pipeline model
            if (pipelineTask instanceof TranslationTask) 
            {
                TranslationTask translationTask = (TranslationTask) pipelineTask;
                //get language pair if it exists
                if(translationTask.getConfig()!=null && translationTask.getConfig().getLanguage()!=null)    
                {
                    lp = translationTask.getConfig().getLanguage();
                }
                //get pipeline model task specifications for this particular task
                for(TaskSpecification pipelineSpecification : pipelineModel.getTaskSpecifications())
                {
                    if(pipelineSpecification.getTaskType() == SupportedTasks.TRANSLATION)
                    {
                        taskSpecifications.add(getPossibleConfigForCurrentTask(lp,pipelineSpecification,taskSpecifications));
                    }
                }
            } 
            else if (pipelineTask instanceof ASRTask) 
            {
                ASRTask asrTask = (ASRTask) pipelineTask;
                if(asrTask.getConfig()!=null && asrTask.getConfig().getLanguage()!=null)    
                {
                    lp = asrTask.getConfig().getLanguage();   
                }
                //get pipeline model task specifications for this particular task
                for(TaskSpecification pipelineSpecification : pipelineModel.getTaskSpecifications())
                {
                    if(pipelineSpecification.getTaskType() == SupportedTasks.ASR)
                    {
                        taskSpecifications.add(getPossibleConfigForCurrentTask(lp,pipelineSpecification,taskSpecifications));
                    }
                }
            } 
            else if (pipelineTask instanceof TTSTask) 
            {
                TTSTask ttsTask = (TTSTask) pipelineTask;
                if(ttsTask.getConfig()!=null && ttsTask.getConfig().getLanguage()!=null)    
                {
                    lp = ttsTask.getConfig().getLanguage();   
                }
                //get pipeline model task specifications for this particular task
                for(TaskSpecification pipelineSpecification : pipelineModel.getTaskSpecifications())
                {
                    if(pipelineSpecification.getTaskType() == SupportedTasks.TTS)
                    {
                        taskSpecifications.add(getPossibleConfigForCurrentTask(lp,pipelineSpecification,taskSpecifications));
                    }
                }
            }
        }
        log.info("TASK SPECIFICATIONS :: "+taskSpecifications.toString());
        return taskSpecifications;
    }

    PipelineResponseLanguagesList getPipelineResponseLanguagesList(TaskSpecifications individualTaskSpecifications)
    {
        PipelineResponseLanguagesList pipelineResponseLanguagesList = new PipelineResponseLanguagesList();


        LanguageSchema pipelineSchema = new LanguageSchema();
        pipelineSchema.setSourceLanguage(firstTaskSchema.getSourceLanguage());
        //PARSHANT
        //	List<SupportedLanguages> targetLangList = new ArrayList<SupportedLanguages>();
        //	List<SupportedLanguages> targetLangListCopy = new ArrayList<SupportedLanguages>();
        List<LanguagePair> targetLangList = new ArrayList<LanguagePair>();
        List<LanguagePair> targetLangListCopy = new ArrayList<LanguagePair>();
        
        if (firstTaskSchema.getTargetLanguageList() != null) {
            log.info("FIRST Task Target Languages :: " + firstTaskSchema.getTargetLanguageList());

            for (LanguagePair lp : firstTaskSchema.getTargetLanguageList()) {
                
                //PARSHANT
                //targetLangList.add(lp.getTargetLanguage());
                //targetLangListCopy.add(lp.getTargetLanguage());
                targetLangList.add(lp);
                targetLangListCopy.add(lp);
            }


        }

        log.info("TARGET LANG LIST :: "+targetLangList.toString());
        log.info("TARGET LANG LIST COPY :: "+targetLangListCopy.toString());

        // DFS for targetLangList creation [Final Pipeline Target Lang List]
        int targetLangSize = targetLangList.size();
        int targetLangSizeCopy = targetLangSize;
        int currentTaskIndex = 1;
        while (currentTaskIndex < taskLength) {
            for (int i = 0; i < targetLangSize; i++) {
                
                //PARSHANT
                //SupportedLanguages targetLanguage = targetLangList.get(0);
                
                LanguagePair targetLanguage = targetLangList.get(0);	
                // refers to prev. target language task
                // list
                targetLangList.remove(0);
                LanguagesList currentLangList = languagesArrayList.get(currentTaskIndex);
                for (LanguageSchema curLangSchema : currentLangList) {
                    //LanguageSchema tempLanguageSchema = new LanguageSchema();
                    if (targetLanguage.getTargetLanguage().equals(curLangSchema.getSourceLanguage().getSourceLanguage()) && 
                        targetLanguage.getTargetScriptCode().equals(curLangSchema.getSourceLanguage().getSourceScriptCode())) {
                        if (curLangSchema.getTargetLanguageList() != null) {
                            for (LanguagePair lp : curLangSchema.getTargetLanguageList()) {
                                //PARSHANT
                                //targetLangList.add(lp.getTargetLanguage());
                                targetLangList.add(lp);

                            }
                        } else
                            //PARSHANT
                            //targetLangList.add(curLangSchema.getSourceLanguage().getSourceLanguage());
                            targetLangList.add(curLangSchema.getSourceLanguage());

                    }
                    //tempLanguageSchema.setSourceLanguage(curLangSchema.getSourceLanguage());
                    //tempLanguageSchema.setTargetLanguageList(curLangSchema.getTargetLanguageList());
                }
            }
            targetLangSize = targetLangList.size();
            currentTaskIndex++;
        }


        return pipelineResponseLanguagesList;
    }
}
